When would you want to use a remote repository rather than keeping all your work local?

Use a remote repository when you will be working from different computers, for example, a home computer and a work computer.
Or, use a remote repository when you're working with a team and mulitple people will be committing to the project. 
A remote repository would also be useful when you want to keep a backup of your work for any reason, or if you want to make your 
project available to others to use. Very useful!

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Your work may not automatically work smoothly with updates on the remote, so best to have the control
to choose if and when you pull the latest from remote. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is when you copy someone else's repository to your github account. You make a fork on the github site itself. 
A clone is when you make a local copy of a repository on github (although you can also make a copy of a local repository). 
A branch is when you want to work on a specific aspect or feature of your current project. 
Use forking when you want to make your own changes to someone else's public repository.
Use clone when you want to contribute to someone else's repository, or when you want to store your repository on github
and work on it locally. 
Use branch when you want to try a special feature or a particular bug fix on your current
project. 

What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit of having a copy of the last known state of the remote stored locally is that you can work offline. You can grab the copy of the remote, and use local tools like git diff and git log to closely inspect the differences between the versions, and then decide precisely how and when to merge. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without Git or GitHub, I could either send copies of my work to collaborators or work on a shared document. Either way, keeping track of changes and when things are merged would be cumbersome. 

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

It's useful to make changes in a separate branch rather than directly in master when you want master to always be in a working state. 
Changes are only incorporated after they have been reviewed, perhaps by other teammembers via a pull request. 
It's quicker to just add changes to master, but it's safer to use a separate branch. 
